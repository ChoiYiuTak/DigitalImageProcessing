# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DIP.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_DigitalImageProcessing(object):
    def setupUi(self, DigitalImageProcessing):
        DigitalImageProcessing.setObjectName("DigitalImageProcessing")
        DigitalImageProcessing.resize(868, 600)
        self.centralwidget = QtWidgets.QWidget(DigitalImageProcessing)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(30, 40, 341, 291))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(14)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.original_img = QtWidgets.QLabel(self.groupBox)
        self.original_img.setGeometry(QtCore.QRect(40, 30, 261, 231))
        self.original_img.setStyleSheet("background : rgb(0, 170, 255)")
        self.original_img.setText("")
        self.original_img.setObjectName("original_img")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(480, 40, 341, 291))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(14)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.fixed_img = QtWidgets.QLabel(self.groupBox_2)
        self.fixed_img.setGeometry(QtCore.QRect(40, 30, 261, 231))
        self.fixed_img.setStyleSheet("background : rgb(0, 170, 255)")
        self.fixed_img.setText("")
        self.fixed_img.setObjectName("fixed_img")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(320, 390, 191, 91))
        self.pushButton.setObjectName("pushButton")
        DigitalImageProcessing.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(DigitalImageProcessing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 868, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_Hough = QtWidgets.QMenu(self.menubar)
        self.menu_Hough.setObjectName("menu_Hough")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        DigitalImageProcessing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(DigitalImageProcessing)
        self.statusbar.setObjectName("statusbar")
        DigitalImageProcessing.setStatusBar(self.statusbar)
        self.actionDigitalImageAnd = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageAnd.setObjectName("actionDigitalImageAnd")
        self.actionDigitalImageOr = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageOr.setObjectName("actionDigitalImageOr")
        self.actionDigitalImageNegation = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageNegation.setObjectName("actionDigitalImageNegation")
        self.actionDigitalImageAdd = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageAdd.setObjectName("actionDigitalImageAdd")
        self.actionDigitalImageSubtract = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageSubtract.setObjectName("actionDigitalImageSubtract")
        self.actionDigitalImageMultiply = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageMultiply.setObjectName("actionDigitalImageMultiply")
        self.actionDigitalImageDivide = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageDivide.setObjectName("actionDigitalImageDivide")
        self.actionDigitalImageZoomInOut = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageZoomInOut.setObjectName("actionDigitalImageZoomInOut")
        self.actionDigitalImageMove = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageMove.setObjectName("actionDigitalImageMove")
        self.actionDigitalImageRotation = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageRotation.setObjectName("actionDigitalImageRotation")
        self.actionDigitalImageFlip = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageFlip.setObjectName("actionDigitalImageFlip")
        self.actionDigitalImageVerticalFlip = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageVerticalFlip.setObjectName("actionDigitalImageHorizontalFlip")
        self.actionDigitalImageGrayscaleHistogram = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageGrayscaleHistogram.setObjectName("actionDigitalImageGrayscaleHistogram")
        self.actionDigitalImageColorHistogram = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageColorHistogram.setObjectName("actionDigitalImageColorHistogram")
        self.actionCreateHistogram = QtWidgets.QAction(DigitalImageProcessing)
        self.actionCreateHistogram.setObjectName("actionCreateHistogram")
        self.actionHistogramModification = QtWidgets.QAction(DigitalImageProcessing)
        self.actionHistogramModification.setObjectName("actionHistogramModification")
        self.actionDigitalImageBorderDetection = QtWidgets.QAction(DigitalImageProcessing)
        self.actionDigitalImageBorderDetection.setObjectName("actionDigitalImageBorderDetection")
        self.actionRoberts = QtWidgets.QAction(DigitalImageProcessing)
        self.actionRoberts.setObjectName("actionRoberts")
        self.actionPrewitt_Sobel = QtWidgets.QAction(DigitalImageProcessing)
        self.actionPrewitt_Sobel.setObjectName("actionPrewitt_Sobel")
        self.actionLaplacian = QtWidgets.QAction(DigitalImageProcessing)
        self.actionLaplacian.setObjectName("actionLaplacian")
        self.actionLoG = QtWidgets.QAction(DigitalImageProcessing)
        self.actionLoG.setObjectName("actionLoG")
        self.actionCanny = QtWidgets.QAction(DigitalImageProcessing)
        self.actionCanny.setObjectName("actionCanny")
        self.actionMorphology = QtWidgets.QAction(DigitalImageProcessing)
        self.actionMorphology.setObjectName("actionMorphology")
        self.actionStructureElement = QtWidgets.QAction(DigitalImageProcessing)
        self.actionStructureElement.setText("")
        self.actionStructureElement.setObjectName("actionStructureElement")
        self.actionCategorizationOfStructureElement = QtWidgets.QAction(DigitalImageProcessing)
        self.actionCategorizationOfStructureElement.setObjectName("actionCategorizationOfStructureElement")
        self.actionErode = QtWidgets.QAction(DigitalImageProcessing)
        self.actionErode.setObjectName("actionErode")
        self.actionExpand = QtWidgets.QAction(DigitalImageProcessing)
        self.actionExpand.setObjectName("actionExpand")
        self.actionMorphologicalOpening = QtWidgets.QAction(DigitalImageProcessing)
        self.actionMorphologicalOpening.setObjectName("actionMorphologicalOpening")
        self.actionMorphologicalClosing = QtWidgets.QAction(DigitalImageProcessing)
        self.actionMorphologicalClosing.setObjectName("actionMorphologicalClosing")
        self.actionNoiseDescriptor = QtWidgets.QAction(DigitalImageProcessing)
        self.actionNoiseDescriptor.setObjectName("actionNoiseDescriptor")
        self.actionMeanClassFilter = QtWidgets.QAction(DigitalImageProcessing)
        self.actionMeanClassFilter.setObjectName("actionMeanClassFilter")
        self.actionOrderStatisticFilter = QtWidgets.QAction(DigitalImageProcessing)
        self.actionOrderStatisticFilter.setObjectName("actionOrderStatisticFilter")
        self.actionSelectiveClassFilter = QtWidgets.QAction(DigitalImageProcessing)
        self.actionSelectiveClassFilter.setObjectName("actionSelectiveClassFilter")
        self.actionAffineTransformation = QtWidgets.QAction(DigitalImageProcessing)
        self.actionAffineTransformation.setObjectName("actionAffineTransformation")
        self.actionHough = QtWidgets.QAction(DigitalImageProcessing)
        self.actionHough.setObjectName("actionHough")
        self.actionHoughP = QtWidgets.QAction(DigitalImageProcessing)
        self.actionHoughP.setObjectName("actionHoughP")
        self.menu.addAction(self.actionDigitalImageAnd)
        self.menu.addAction(self.actionDigitalImageOr)
        self.menu.addAction(self.actionDigitalImageNegation)
        self.menu.addAction(self.actionDigitalImageAdd)
        self.menu.addAction(self.actionDigitalImageSubtract)
        self.menu.addAction(self.actionDigitalImageMultiply)
        self.menu.addAction(self.actionDigitalImageDivide)
        self.menu_2.addAction(self.actionDigitalImageZoomInOut)
        self.menu_2.addAction(self.actionDigitalImageMove)
        self.menu_2.addAction(self.actionDigitalImageRotation)
        self.menu_2.addAction(self.actionDigitalImageFlip)
        self.menu_2.addAction(self.actionDigitalImageVerticalFlip)
        self.menu_2.addAction(self.actionAffineTransformation)
        self.menu_3.addAction(self.actionDigitalImageGrayscaleHistogram)
        self.menu_3.addAction(self.actionDigitalImageColorHistogram)
        self.menu_3.addAction(self.actionCreateHistogram)
        self.menu_3.addAction(self.actionHistogramModification)
        self.menu_Hough.addAction(self.actionHough)
        self.menu_Hough.addAction(self.actionHoughP)
        self.menu_4.addAction(self.actionDigitalImageBorderDetection)
        self.menu_4.addAction(self.actionRoberts)
        self.menu_4.addAction(self.actionPrewitt_Sobel)
        self.menu_4.addAction(self.actionLaplacian)
        self.menu_4.addAction(self.actionLoG)
        self.menu_4.addAction(self.actionCanny)
        self.menu_5.addAction(self.actionMorphology)
        self.menu_5.addAction(self.actionErode)
        self.menu_5.addAction(self.actionExpand)
        self.menu_5.addAction(self.actionMorphologicalOpening)
        self.menu_5.addAction(self.actionMorphologicalClosing)
        self.menu_6.addAction(self.actionNoiseDescriptor)
        self.menu_6.addAction(self.actionMeanClassFilter)
        self.menu_6.addAction(self.actionOrderStatisticFilter)
        self.menu_6.addAction(self.actionSelectiveClassFilter)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_Hough.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.retranslateUi(DigitalImageProcessing)
        self.pushButton.clicked.connect(DigitalImageProcessing.openImg)
        self.actionDigitalImageAnd.triggered.connect(DigitalImageProcessing.alAnd)
        self.actionDigitalImageOr.triggered.connect(DigitalImageProcessing.alOr)
        self.actionDigitalImageNegation.triggered.connect(DigitalImageProcessing.alNegation)
        self.actionDigitalImageAdd.triggered.connect(DigitalImageProcessing.alAdd)
        self.actionDigitalImageSubtract.triggered.connect(DigitalImageProcessing.alSubtract)
        self.actionDigitalImageMultiply.triggered.connect(DigitalImageProcessing.alMulty)
        self.actionDigitalImageDivide.triggered.connect(DigitalImageProcessing.alDivide)
        self.actionDigitalImageFlip.triggered.connect(DigitalImageProcessing.horizonal)
        self.actionDigitalImageVerticalFlip.triggered.connect(DigitalImageProcessing.vertical)
        self.actionDigitalImageMove.triggered.connect(DigitalImageProcessing.moveImg)
        self.actionDigitalImageRotation.triggered.connect(DigitalImageProcessing.rotation)
        self.actionDigitalImageZoomInOut.triggered.connect(DigitalImageProcessing.extend)
        self.actionAffineTransformation.triggered.connect(DigitalImageProcessing.affine)
        self.actionDigitalImageGrayscaleHistogram.triggered.connect(DigitalImageProcessing.histGrey)
        self.actionDigitalImageColorHistogram.triggered.connect(DigitalImageProcessing.histRGB)
        self.actionCreateHistogram.triggered.connect(DigitalImageProcessing.histD)
        self.actionHistogramModification.triggered.connect(DigitalImageProcessing.editHist)
        self.actionHough.triggered.connect(DigitalImageProcessing.houghLines)
        self.actionHoughP.triggered.connect(DigitalImageProcessing.houghLinesP)
        self.actionDigitalImageBorderDetection.triggered.connect(DigitalImageProcessing.basic_of_edge_detection)
        self.actionRoberts.triggered.connect(DigitalImageProcessing.roberts)
        self.actionPrewitt_Sobel.triggered.connect(DigitalImageProcessing.sobel)
        self.actionLaplacian.triggered.connect(DigitalImageProcessing.laplacian)
        self.actionLoG.triggered.connect(DigitalImageProcessing.LoG)
        self.actionCanny.triggered.connect(DigitalImageProcessing.canny)
        self.actionErode.triggered.connect(DigitalImageProcessing.corrode)
        QtCore.QMetaObject.connectSlotsByName(DigitalImageProcessing)

    def retranslateUi(self, DigitalImageProcessing):
        _translate = QtCore.QCoreApplication.translate
        DigitalImageProcessing.setWindowTitle(_translate("DigitalImageProcessing", "数字图像处理"))
        self.groupBox.setTitle(_translate("DigitalImageProcessing", "原始图片"))
        self.groupBox_2.setTitle(_translate("DigitalImageProcessing", "修改后图片"))
        self.pushButton.setText(_translate("DigitalImageProcessing", "打开图片"))
        self.menu.setTitle(_translate("DigitalImageProcessing", "数字图像的计算"))
        self.menu_2.setTitle(_translate("DigitalImageProcessing", "数字图像的几何变换"))
        self.menu_3.setTitle(_translate("DigitalImageProcessing", "数字图像直方图"))
        self.menu_Hough.setTitle(_translate("DigitalImageProcessing", "使用Hough变换实现线条变换检测"))
        self.menu_4.setTitle(_translate("DigitalImageProcessing", "边缘检测"))
        self.menu_5.setTitle(_translate("DigitalImageProcessing", "数字图像形态学"))
        self.menu_6.setTitle(_translate("DigitalImageProcessing", "噪声滤除"))
        self.actionDigitalImageAnd.setText(_translate("DigitalImageProcessing", "与运算"))
        self.actionDigitalImageOr.setText(_translate("DigitalImageProcessing", "或运算"))
        self.actionDigitalImageNegation.setText(_translate("DigitalImageProcessing", "非运算"))
        self.actionDigitalImageAdd.setText(_translate("DigitalImageProcessing", "加法运算"))
        self.actionDigitalImageSubtract.setText(_translate("DigitalImageProcessing", "减法运算"))
        self.actionDigitalImageMultiply.setText(_translate("DigitalImageProcessing", "乘法运算"))
        self.actionDigitalImageDivide.setText(_translate("DigitalImageProcessing", "除法运算"))
        self.actionDigitalImageZoomInOut.setText(_translate("DigitalImageProcessing", "扩展缩放"))
        self.actionDigitalImageMove.setText(_translate("DigitalImageProcessing", "图像平移"))
        self.actionDigitalImageRotation.setText(_translate("DigitalImageProcessing", "图像旋转"))
        self.actionDigitalImageFlip.setText(_translate("DigitalImageProcessing", "图像水平翻转"))
        self.actionDigitalImageVerticalFlip.setText(_translate("DigitalImageProcessing", "图像垂直翻转"))
        self.actionDigitalImageGrayscaleHistogram.setText(_translate("DigitalImageProcessing", "灰度直方图"))
        self.actionDigitalImageColorHistogram.setText(_translate("DigitalImageProcessing", "彩色直方图"))
        self.actionCreateHistogram.setText(_translate("DigitalImageProcessing", "绘制直方图"))
        self.actionHistogramModification.setText(_translate("DigitalImageProcessing", "分段线性变换对直方图修改"))
        self.actionDigitalImageBorderDetection.setText(_translate("DigitalImageProcessing", "边缘检测的基本原理与图像增强"))
        self.actionRoberts.setText(_translate("DigitalImageProcessing", "Roberts"))
        self.actionPrewitt_Sobel.setText(_translate("DigitalImageProcessing", "Prewitt & Sobel"))
        self.actionLaplacian.setText(_translate("DigitalImageProcessing", "Laplacian"))
        self.actionLoG.setText(_translate("DigitalImageProcessing", "LoG"))
        self.actionCanny.setText(_translate("DigitalImageProcessing", "Canny"))
        self.actionMorphology.setText(_translate("DigitalImageProcessing", "图像形态学操作"))
        self.actionCategorizationOfStructureElement.setText(_translate("DigitalImageProcessing", "jiegouyuandefenlei"))
        self.actionErode.setText(_translate("DigitalImageProcessing", "腐蚀"))
        self.actionExpand.setText(_translate("DigitalImageProcessing", "膨胀"))
        self.actionMorphologicalOpening.setText(_translate("DigitalImageProcessing", "开运算"))
        self.actionMorphologicalClosing.setText(_translate("DigitalImageProcessing", "闭运算"))
        self.actionNoiseDescriptor.setText(_translate("DigitalImageProcessing", "噪声描述器"))
        self.actionMeanClassFilter.setText(_translate("DigitalImageProcessing", "均值滤波器"))
        self.actionOrderStatisticFilter.setText(_translate("DigitalImageProcessing", "排序统计类滤波器"))
        self.actionSelectiveClassFilter.setText(_translate("DigitalImageProcessing", "选择性滤波器"))
        self.actionAffineTransformation.setText(_translate("DigitalImageProcessing", "仿射变换"))
        self.actionHough.setText(_translate("DigitalImageProcessing", "使用Hough变换实现线条变化检测"))
        self.actionHoughP.setText(_translate("DigitalImageProcessing", "HoughP"))
